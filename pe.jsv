#!/bin/bash
# 
# Copyright 2012, Brian Smith
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

PATH=/bin:/usr/bin

jsv_on_start(){
  # jsv_send_env
  return
}

jsv_on_verify(){
  do_correct="false"

  ppr=$(jsv_sub_get_param l_hard ppr)
  if [[ -n "$ppr" ]]; then
    ppr=1
  fi
  rpn=$(jsv_sub_get_param l_hard rpn)
  pcpus=$(jsv_sub_get_param l_hard pcpus)
  pcpus_min=$(jsv_sub_get_param l_hard pcpus_min)
  pcpus_max=$(jsv_sub_get_param l_hard pcpus_max)
  nodes=$(jsv_sub_get_param l_hard nodes)

  # check if they have cpus instead
  if [[ -z "$rpn" || -z "$nodes" ]]; then
    if [[ -n "$pcpus" || -n "$pcpus_min" || -n "$pcpus_max" ]]; then
      do_correct="true"
      jsv_set_param pe_name "%%QUEUE_PREFIX%%_*"
      if [[ -n "$pcpus_min" && -n "$pcpus_max" ]]; then
        jsv_set_param pe_min "$pcpus_min"
        jsv_set_param pe_min "$pcpus_max"
      elif [[ -n "$pcpus" ]]; then
        jsv_set_param pe_min "$pcpus"
        jsv_set_param pe_max "$pcpus"
      else
        jsv_reject "Invalid parallel job configuration specified."
        return
      fi
    else
      # no valid parallel request found
      return
    fi
  else
    if [[ -n "$rpn" && -n "$nodes" ]]; then
      jsv_add_env "RANKS_PER_NODE" "$rpn"
      jsv_add_env "PROCESSES_PER_RANK" "$ppr"

      jsv_set_param pe_name "%%QUEUE_PREFIX%%_*.$((rpn*ppr))"
      jsv_set_param pe_min $((rpn*nodes*ppr))
      jsv_set_param pe_max $((rpn*nodes*ppr))
    else
      jsv_reject "Invalid parallel job configuration specified."
    fi
  fi
      
  if [[ "$do_correct" = "true" ]]; then
    jsv_correct "Job was modified before it was accepted"
  else
    jsv_accept "Job is accepted"
  fi
  return
}

source "$SGE_ROOT/util/resources/jsv/jsv_include.sh"

jsv_main
